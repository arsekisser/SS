LEX PART
%{
#include "y.tab.h"
#include <stdlib.h>
extern int yylval;
%}

%%
[0-9]+ {yylval=atoi(yytext);
	return NUM;}
\n {return 0;}
. {return yytext[0];}
%%

YACC PART
%{
#include<stdio.h>
int valid=1;
%}
%token NUM
%left '+' '-'
%left '*' '/'
%%
Stmt: expr { if(valid)
		{
printf("Result=%d\n",$$);}
          		}
expr: expr '+ 'expr {$$=$1+$3;}
        | expr '-' expr {$$=$1-$3;}
        | expr '*' expr {$$=$1*$3;}
        | expr '/' expr {    if($3==0)
{
				valid=0;
printf("Divide by zero error\n");
}
			else
				$$=$1/$3;}
       | '('expr')' {$$=$2;}
       | NUM {$$=$1;}
       ;
%%

main()
{
	printf("Enter Arithmetic Expression:\n");
	yyparse();
	if(valid==1)
		printf("Expression is valid\n");
}

int yyerror()
{
	printf("Invalid Expression\n");
	exit(0);
}	 
